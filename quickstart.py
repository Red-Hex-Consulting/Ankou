#!/usr/bin/env python3
"""
Ankou C2 Quick Start Script
Generates configuration files with matching keys for server and relay.
No external dependencies - works on Linux and Windows with standard Python 3.
"""

import os
import secrets
import sys


def generate_random_hex(length):
    """Generate a random hex string of specified length."""
    return secrets.token_hex(length)


def generate_random_key(length):
    """Generate a random key of specified byte length."""
    return secrets.token_hex(length)


def create_server_config(jwt_secret, hmac_key, registration_key):
    """Create the server/ankou.config file."""
    config_path = os.path.join("server", "ankou.config")
    
    config_content = f"""# Ankou Server Configuration
# Auto-generated by quickstart.py

JWT_SECRET={jwt_secret}
HMAC_KEY={hmac_key}
REGISTRATION_KEY={registration_key}
"""
    
    with open(config_path, "w") as f:
        f.write(config_content)
    
    print(f"[+] Created {config_path}")
    return config_path


def create_server_json_config(operator_host, operator_port, relay_host, relay_port):
    """Create the server/server_config.json file."""
    config_path = os.path.join("server", "server_config.json")
    
    config_content = f"""{{
  "relay": {{
    "host": "{relay_host}",
    "port": {relay_port},
    "description": "Agent relay communication endpoint (REST API for agent tasking)"
  }},
  "operator": {{
    "host": "{operator_host}",
    "port": {operator_port},
    "description": "Operator console endpoint (WebSocket/GraphQL for frontend)"
  }}
}}
"""
    
    with open(config_path, "w") as f:
        f.write(config_content)
    
    print(f"[+] Created {config_path}")
    return config_path


def create_relay_config(hmac_key, upstream_url, listen_addr):
    """Create the ghost-relay/relay.config file."""
    config_path = os.path.join("ghost-relay", "relay.config")
    
    config_content = f"""# Ghost Relay Configuration
# Auto-generated by quickstart.py
#
# The relay sits between agents and the C2 server, providing protocol translation
# and an additional layer of authentication.

# Upstream C2 server URL (where to forward agent traffic)
UPSTREAM_URL={upstream_url}

# HMAC key for validating agent requests (must match agents)
AGENT_HMAC_KEY={hmac_key}

# HMAC key for relay -> C2 authentication (must match server HMAC_KEY)
SERVER_HMAC_KEY={hmac_key}

# Listen address for relay protocols (where agents connect)
LISTEN_ADDR={listen_addr}
"""
    
    with open(config_path, "w") as f:
        f.write(config_content)
    
    print(f"[+] Created {config_path}")
    return config_path


def prompt_with_default(prompt_text, default_value):
    """Prompt user for input with a default value."""
    user_input = input(f"{prompt_text} [{default_value}]: ").strip()
    return user_input if user_input else default_value


def print_banner():
    banner = r"""
   ('-.         .-') _ .-. .-')                            
  ( OO ).-.    ( OO ) )\  ( OO )                           
  / . --. /,--./ ,--,' ,--. ,--.  .-'),-----.  ,--. ,--.   
  | \-.  \ |   \ |  |\ |  .'   / ( OO'  .-.  ' |  | |  |   
.-'-'  |  ||    \|  | )|      /, /   |  | |  | |  | | .-') 
 \| |_.'  ||  .     |/ |     ' _)\_) |  |\|  | |  |_|( OO )
  |  .-.  ||  |\    |  |  .   \    \ |  | |  | |  | | `-' /
  |  | |  ||  | \   |  |  |\   \    `'  '-'  '('  '-'(_.-' 
  `--' `--'`--'  `--'  `--' '--'      `-----'   `-----'  
    """
    print(banner)


def main():
    print_banner()
    print("\n[*] Ankou C2 Framework Configuration\n")
    
    # Check if we're in the right directory
    if not os.path.exists("server") or not os.path.exists("ghost-relay"):
        print("[ERROR] This script must be run from the ankou-bot root directory!")
        print("   Expected structure: ankou-bot/")
        print("                         ├── server/")
        print("                         ├── ghost-relay/")
        print("                         └── quickstart.py")
        sys.exit(1)
    
    # Prompt for network configuration
    print("Configure network settings (press Enter to use defaults):\n")
    
    c2_operator_interface = prompt_with_default("C2 operator interface", "0.0.0.0")
    c2_operator_port = prompt_with_default("C2 operator port", "8443")
    
    c2_relay_bind = prompt_with_default("C2 relay bind", "127.0.0.1")
    c2_relay_port = prompt_with_default("C2 relay port", "8444")
    
    relay_implant_interface = prompt_with_default("Relay Implant Interface", "0.0.0.0")
    
    relay_c2_upstream = prompt_with_default("Relay C2 Upstream", "127.0.0.1")
    relay_c2_upstream_port = prompt_with_default("Relay C2 Upstream port", c2_relay_port)
    
    # Build full upstream URL
    upstream_url = f"https://{relay_c2_upstream}:{relay_c2_upstream_port}"
    
    # Validate ports
    try:
        c2_operator_port = int(c2_operator_port)
        c2_relay_port = int(c2_relay_port)
        relay_c2_upstream_port = int(relay_c2_upstream_port)
        if not (1 <= c2_operator_port <= 65535 and 1 <= c2_relay_port <= 65535 and 1 <= relay_c2_upstream_port <= 65535):
            raise ValueError("Ports must be between 1 and 65535")
    except ValueError as e:
        print(f"\n[ERROR] Invalid port number: {e}")
        sys.exit(1)
    
    # Generate cryptographic keys
    print("\n[*] Generating cryptographic keys...")
    jwt_secret = generate_random_key(64)      # 128 hex chars (64 bytes)
    hmac_key = generate_random_key(32)        # 64 hex chars (32 bytes)
    registration_key = generate_random_hex(16) # 32 hex chars
    print("[+] Generated JWT secret (128 chars)")
    print("[+] Generated HMAC key (64 chars)")
    print(f"[+] Generated registration key (32 chars)")
    print()
    
    # Create server configs
    print("[*] Creating server configuration files...")
    create_server_config(jwt_secret, hmac_key, registration_key)
    create_server_json_config(c2_operator_interface, c2_operator_port, c2_relay_bind, c2_relay_port)
    print()
    
    # Create relay config
    print("[*] Creating relay configuration file...")
    create_relay_config(hmac_key, upstream_url, relay_implant_interface)
    print()
    
    # Print summary
    print("=" * 70)
    print("[SUCCESS] Configuration complete!")
    print("=" * 70)
    print()
    print("Configuration Summary:")
    print(f"   • Registration Key:        {registration_key}")
    print(f"   • C2 operator interface:   https://{c2_operator_interface}:{c2_operator_port}")
    print(f"   • C2 relay bind:           https://{c2_relay_bind}:{c2_relay_port}")
    print(f"   • Relay Implant Interface: {relay_implant_interface} (all protocols)")
    print(f"   • Relay C2 Upstream:       {upstream_url}")
    print()
    print("Next Steps:")
    print()
    print("   1. Start the C2 server:")
    print("      cd server")
    print("      go run .")
    print()
    print("   2. Start the ghost relay (in a new terminal):")
    print("      cd ghost-relay")
    print("      go run .")
    print()
    print("   3. Access the operator interface:")
    if c2_operator_interface == "0.0.0.0":
        print("      • Open your browser to https://<your-ip>:" + str(c2_operator_port))
    else:
        print(f"      • Open your browser to https://{c2_operator_interface}:{c2_operator_port}")
    print("      • Accept the self-signed certificate warning")
    print(f"      • Use registration key: {registration_key}")
    print()
    print("   4. Build and deploy agents:")
    print("      cd agents/geist")
    print("      ./build.sh   # or build.bat on Windows")
    print()
    print("Tips:")
    print("   • The server generates TLS certificates automatically")
    print("   • The relay also generates TLS certificates automatically")
    print("   • Keep your registration key safe - you'll need it for first login")
    print("   • All keys are cryptographically secure random values")
    print()
    print("=" * 70)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n[ERROR] Aborted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n[ERROR] {e}")
        sys.exit(1)

